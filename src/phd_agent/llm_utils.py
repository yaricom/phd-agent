import json
from typing import Any, Dict


def parse_llm_response(llm_response: str) -> Dict[str, Any]:
    """
    Parses the response from a language learning model (LLM) and converts its structure
    into a dictionary. If the incoming string cannot be decoded as JSON, it attempts
    to process it using an alternative parsing method.

    Args:
        llm_response: str
            The response string received from the LLM, which is expected to be in a
            JSON-compatible format.

    Returns:
        A dictionary representation of the parsed LLM response. The structure
        depends on the input format received. If the input cannot be parsed
        as JSON, an alternative parsing mechanism is utilized.
    Raise:
        json.JSONDecodeError if the input cannot be parsed as JSON.
    """
    try:
        return json.loads(llm_response)
    except json.JSONDecodeError:
        return _parse_alleged_llm_response(llm_response)


def _parse_alleged_llm_response(llm_response: str) -> Dict[str, Any]:
    """
    Parses an alleged Large Language Model (LLM) response to extract a JSON object.

    This function takes a string response from a Large Language Model and attempts
    to extract a valid JSON object from it by identifying the first opening and
    last closing curly braces and parsing the enclosed content.

    Sometimes, the LLM response may contain a JSON object encoded in a Markdown format, like:

    ```json
    {
     "next_step": "step_name",
    }
    ```

    Args:
        llm_response: str
            The response string generated by a Large Language Model (LLM).

    Returns:
        A dictionary representation of the JSON object extracted from the response.
    """
    open_parenthesis = llm_response.find("{")
    close_parenthesis = llm_response.rfind("}")
    json_string = llm_response[open_parenthesis : close_parenthesis + 1]
    return json.loads(json_string)
